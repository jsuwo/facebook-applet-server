package ca.uwo.csd.cs2212;

import ca.uwo.csd.cs2212.facebook.FacebookClient;
import ca.uwo.csd.cs2212.facebook.Profile;
import ca.uwo.csd.cs2212.facebook.events.FacebookErrorEvent;
import ca.uwo.csd.cs2212.facebook.events.FacebookEventListener;
import ca.uwo.csd.cs2212.facebook.events.FacebookPhotoEvent;
import ca.uwo.csd.cs2212.facebook.events.FacebookProfileEvent;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*******************************************************************************
 * FacebookApplet.java
 * Author: Jeff Shantz <x@y, x = jshantz4, y = csd.uwo.ca>
 * 
 * Main applet class.  If you're going to edit this, I highly recommend doing so
 * in NetBeans for its GUI editing capability.  I used NetBeans 7.1.2.
 ******************************************************************************/
public class FacebookApplet extends javax.swing.JApplet implements FacebookEventListener {

    // User's authentication token passed to the applet
    private String authToken;         
    
    // Used to access the Facebook proxy
    private FacebookClient client;
    
    // Current user's Facebook profile
    private Profile profile;

    @Override
    public void init() {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacebookApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacebookApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacebookApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacebookApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the applet
         */
        try {
            // Get the user's auth token from the applet parameters
            this.authToken = getParameter("token");
            
            // Initialize the Facebook client and set us up for notifications
            client = new FacebookClient(getCodeBase().getHost(), getParameter("proxy_script"), authToken);
            client.addEventListener(this);

            java.awt.EventQueue.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();

                    // If we didn't get an auth token, print an error
                    if (authToken == null) {
                        lblStatus.setText("No authentication token passed.");
                        return;
                    }

                    // Otherwise, fetch the user's profile data 
                    // (FacebookClient will do this on another thread to keep
                    // the UI responsive)
                    lblStatus.setText("Fetching user data...");
                    client.refreshUserProfile();
                }
            });
        } catch (Exception ex) {
            showException(ex);
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMyInfo = new JPanel();
        lblNameLabel = new JLabel();
        lblUsernameLabel = new JLabel();
        lblName = new JLabel();
        lblUsername = new JLabel();
        pnlProfilePhoto = new JPanel();
        lblProfilePhoto = new JLabel();
        pnlFriends = new JPanel();
        scrFriends = new JScrollPane();
        lstFriends = new JList();
        pnlFriendPhoto = new JPanel();
        lblFriendPhoto = new JLabel();
        pnlStatus = new JPanel();
        lblStatus = new JLabel();
        pnlErrors = new JPanel();
        scrErrors = new JScrollPane();
        txtErrors = new JTextArea();

        pnlMyInfo.setBorder(BorderFactory.createTitledBorder("My Information"));

        lblNameLabel.setFont(new Font("Lucida Grande", 1, 13));         lblNameLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        lblNameLabel.setText("Name");

        lblUsernameLabel.setFont(new Font("Lucida Grande", 1, 13));         lblUsernameLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        lblUsernameLabel.setText("Username");

        pnlProfilePhoto.setBorder(BorderFactory.createEtchedBorder());
        pnlProfilePhoto.setMaximumSize(new Dimension(100, 100));
        pnlProfilePhoto.setMinimumSize(new Dimension(100, 100));
        pnlProfilePhoto.setPreferredSize(new Dimension(100, 100));
        pnlProfilePhoto.setSize(new Dimension(100, 100));
        pnlProfilePhoto.setLayout(new BorderLayout());

        lblProfilePhoto.setIcon(new ImageIcon(getClass().getResource("/ca/uwo/csd/cs2212/resources/unknown.jpg")));         lblProfilePhoto.setSize(new Dimension(100, 100));
        pnlProfilePhoto.add(lblProfilePhoto, BorderLayout.CENTER);

        GroupLayout pnlMyInfoLayout = new GroupLayout(pnlMyInfo);
        pnlMyInfo.setLayout(pnlMyInfoLayout);
        pnlMyInfoLayout.setHorizontalGroup(
            pnlMyInfoLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlMyInfoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlMyInfoLayout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(lblNameLabel)
                    .addComponent(lblUsernameLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(pnlMyInfoLayout.createParallelGroup(Alignment.LEADING)
                    .addComponent(lblUsername)
                    .addComponent(lblName))
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlProfilePhoto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMyInfoLayout.setVerticalGroup(
            pnlMyInfoLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlMyInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMyInfoLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(lblNameLabel)
                    .addComponent(lblName))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(pnlMyInfoLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(lblUsernameLabel)
                    .addComponent(lblUsername))
                .addContainerGap())
            .addGroup(pnlMyInfoLayout.createSequentialGroup()
                .addComponent(pnlProfilePhoto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        pnlFriends.setBorder(BorderFactory.createTitledBorder("My Friends"));

        lstFriends.setEnabled(false);
        lstFriends.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                lstFriendsValueChanged(evt);
            }
        });
        scrFriends.setViewportView(lstFriends);

        pnlFriendPhoto.setBorder(BorderFactory.createEtchedBorder());
        pnlFriendPhoto.setMaximumSize(new Dimension(100, 100));
        pnlFriendPhoto.setMinimumSize(new Dimension(100, 100));
        pnlFriendPhoto.setPreferredSize(new Dimension(100, 100));
        pnlFriendPhoto.setSize(new Dimension(100, 100));
        pnlFriendPhoto.setLayout(new BorderLayout());

        lblFriendPhoto.setIcon(new ImageIcon(getClass().getResource("/ca/uwo/csd/cs2212/resources/unknown.jpg")));         lblFriendPhoto.setSize(new Dimension(100, 100));
        pnlFriendPhoto.add(lblFriendPhoto, BorderLayout.CENTER);

        GroupLayout pnlFriendsLayout = new GroupLayout(pnlFriends);
        pnlFriends.setLayout(pnlFriendsLayout);
        pnlFriendsLayout.setHorizontalGroup(
            pnlFriendsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlFriendsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrFriends, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                .addComponent(pnlFriendPhoto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlFriendsLayout.setVerticalGroup(
            pnlFriendsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlFriendsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrFriends, GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnlFriendsLayout.createSequentialGroup()
                .addComponent(pnlFriendPhoto, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlStatus.setBorder(BorderFactory.createTitledBorder("Status"));

        lblStatus.setText("Waiting for user token...");

        GroupLayout pnlStatusLayout = new GroupLayout(pnlStatus);
        pnlStatus.setLayout(pnlStatusLayout);
        pnlStatusLayout.setHorizontalGroup(
            pnlStatusLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlStatusLayout.setVerticalGroup(
            pnlStatusLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addComponent(lblStatus)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlErrors.setBorder(BorderFactory.createTitledBorder("Error Console"));

        txtErrors.setColumns(20);
        txtErrors.setEditable(false);
        txtErrors.setRows(5);
        scrErrors.setViewportView(txtErrors);

        GroupLayout pnlErrorsLayout = new GroupLayout(pnlErrors);
        pnlErrors.setLayout(pnlErrorsLayout);
        pnlErrorsLayout.setHorizontalGroup(
            pnlErrorsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(pnlErrorsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrErrors)
                .addContainerGap())
        );
        pnlErrorsLayout.setVerticalGroup(
            pnlErrorsLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, pnlErrorsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrErrors, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(pnlFriends, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMyInfo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlErrors, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlStatus, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(pnlMyInfo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(pnlFriends, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(pnlErrors, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lstFriendsValueChanged(ListSelectionEvent evt) {//GEN-FIRST:event_lstFriendsValueChanged
        if (lstFriends.isSelectionEmpty()) {
            clearPhoto(lblFriendPhoto);
        } else {
            lstFriends.setEnabled(false);
            lblStatus.setText("Loading photo...");
            client.refreshUserPhoto(((Profile) lstFriends.getSelectedValue()).getID());
        }
    }//GEN-LAST:event_lstFriendsValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel lblFriendPhoto;
    private JLabel lblName;
    private JLabel lblNameLabel;
    private JLabel lblProfilePhoto;
    private JLabel lblStatus;
    private JLabel lblUsername;
    private JLabel lblUsernameLabel;
    private JList lstFriends;
    private JPanel pnlErrors;
    private JPanel pnlFriendPhoto;
    private JPanel pnlFriends;
    private JPanel pnlMyInfo;
    private JPanel pnlProfilePhoto;
    private JPanel pnlStatus;
    private JScrollPane scrErrors;
    private JScrollPane scrFriends;
    private JTextArea txtErrors;
    // End of variables declaration//GEN-END:variables

    /**
     * Callback method invoked when the FacebookClient finishes downloading the
     * current user's profile data
     * 
     * @param e Details of the event, including the profile
     */
    @Override
    public void profileDataReceived(FacebookProfileEvent e) {
        
        // Store the user's profile
        this.profile = e.getProfile();

        // Set his/her name and username
        this.lblName.setText(this.profile.getName());
        this.lblUsername.setText(this.profile.getUsername());

        // Populate his/her list of friends
        DefaultListModel listModel = new DefaultListModel();

        for (Profile p : this.profile.getFriends()) {
            listModel.addElement(p);
        }

        this.lstFriends.setModel(listModel);
        this.lstFriends.setEnabled(lstFriends.getModel().getSize() != 0);

        // Display the user's profile photo
        setPhoto(this.profile.getPhoto(), this.lblProfilePhoto);

        // Remove any status messages present
        this.clearStatus();
    }

    /**
     * Callback method invoked when the FacebookClient encounters an error
     * while communicating with the proxy script on the server.
     * 
     * @param e Details of the error, including the Exception object
     */
    @Override
    public void errorReceived(FacebookErrorEvent e) {
        
        // Display the exception in the error console at the the bottom of the
        // applet
        this.showException(e.getException());
        
        // Disable/re-enable the friends list if the user actually has friends
        // (since we may have disabled it before the request was made that 
        // produced this error)
        this.lstFriends.setEnabled(lstFriends.getModel().getSize() != 0);
    
        // Remove any status messages present
        this.clearStatus();
    }

    /**
     * Callback method invoked when the FacebookClient is finished downloading
     * a profile photo for a friend of the user.
     * 
     * @param e Details of the event, include the photo downloaded
     */
    @Override
    public void photoReceived(FacebookPhotoEvent e) {

        // Display the friend's photo
        setPhoto(e.getPhoto(), this.lblFriendPhoto);
        
        // Re-enable the friends list
        this.lstFriends.setEnabled(lstFriends.getModel().getSize() != 0);
        
        // Remove any status messages present
        this.clearStatus();
    }

    /**
     * Display the given error message in the console at the bottom of the
     * applet, and print it to the logger as well.
     * 
     * @param ex Exception to display
     */
    private void showException(Exception ex) {

        // If the error console has been initialized, display the error in it
        if (this.txtErrors != null) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PrintStream ps = new PrintStream(baos);
            ex.printStackTrace(ps);

            try {
                txtErrors.setText(baos.toString("UTF-8"));
            }
            catch (Exception e) {
            }
        }

        // Log the error
        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);

        // Remove any status messages present if the status label has been 
        // initialized
        if (this.lblStatus != null) {
            this.clearStatus();
        }
    }

    /**
     * Removes any status message currently set.
     */
    private void clearStatus() {
        this.lblStatus.setText(" ");
    }

    /**
     * Sets the specified photo in the specified component, scaled to 100x100
     * pixels.
     * 
     * @param photo The photo to display
     * @param destination The component in which to display the photo
     */
    private void setPhoto(ImageIcon photo, JLabel destination) {
        if (photo == null) {
            clearPhoto(destination);
            return;
        }

        // Scale the image to 100x100
        Image photoImage = photo.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
        destination.setIcon(new ImageIcon(photoImage));
    }

    /**
     * Clears any photo currently displayed in the specified component, replacing
     * it with the "anonymous" photo.  This method is called when all friends
     * are deselected in the friend's list.
     * 
     * @param destination Component for which to clear the photo
     */
    private void clearPhoto(JLabel destination) {
        destination.setIcon(new ImageIcon(getClass().getResource("/ca/uwo/csd/cs2212/resources/unknown.jpg")));
    }
}
